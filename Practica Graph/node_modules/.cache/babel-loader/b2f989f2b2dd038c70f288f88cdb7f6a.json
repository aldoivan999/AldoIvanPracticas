{"ast":null,"code":"var _jsxFileName = \"/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/test-take/test-take-view.js\";\nimport \"./test-take-view.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { useLocation } from 'react-router-dom';\nimport { getFormById } from \"../../services/FromsTeacherDataService\";\nimport { drawOpenQuestionEditable, drawOptionsQuestionEditable } from \"../form-creator/question-drawer\";\nimport Button from \"react-bootstrap/Button\";\nimport { postForm } from \"../../services/FromsStudentDataService\";\nexport const TestTakeView = () => {\n  const location = useLocation();\n  const path = location.pathname.split(\"/\");\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [form, setForm] = useState({\n    teacher: {},\n    questions: []\n  });\n  useEffect(() => {\n    getFormById(path[path.length - 1]).then(response => {\n      let f = response.data;\n      f.questions = JSON.parse(f.questions);\n      setForm(f);\n    });\n  }, [form.id]);\n\n  function saveForm() {\n    let studentForm = {\n      title: form.title,\n      lesson: form.lesson,\n      student: {\n        id: user.id\n      },\n      grade: 0,\n      date: new Date(),\n      comments: \"\",\n      content: JSON.stringify(form.questions)\n    };\n    postForm(studentForm).then(response => console.log(response.data)).catch(error => console.log(error));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"take-test-container p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"take-test-title text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }\n  }, form.title), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"take-test-subtitle text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  }, form.lesson)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, form.questions.map((question, index) => {\n    switch (question.type) {\n      case \"OPEN\":\n        return drawOpenQuestionEditable(index, question, value => question.answer = value);\n\n      case \"OPTIONS\":\n        return drawOptionsQuestionEditable(index, question);\n\n      default:\n        throw new Error(\"No suitable method found\");\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"login-button\",\n    variant: \"outline-light\",\n    onClick: saveForm,\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Guardar\")));\n};","map":{"version":3,"sources":["/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/test-take/test-take-view.js"],"names":["React","useEffect","useState","Form","Row","Col","useLocation","getFormById","drawOpenQuestionEditable","drawOptionsQuestionEditable","Button","postForm","TestTakeView","location","path","pathname","split","user","JSON","parse","localStorage","getItem","form","setForm","teacher","questions","length","then","response","f","data","id","saveForm","studentForm","title","lesson","student","grade","date","Date","comments","content","stringify","console","log","catch","error","map","question","index","type","value","answer","Error"],"mappings":"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","sourcesContent":["import \"./test-take-view.css\";\r\n\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {useLocation} from 'react-router-dom'\r\nimport {getFormById} from \"../../services/FromsTeacherDataService\";\r\nimport {drawOpenQuestionEditable, drawOptionsQuestionEditable} from \"../form-creator/question-drawer\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {postForm} from \"../../services/FromsStudentDataService\";\r\n\r\nexport const TestTakeView = () => {\r\n    const location = useLocation();\r\n    const path = location.pathname.split(\"/\");\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const [form, setForm] = useState({teacher: {}, questions: []});\r\n\r\n    useEffect(() => {\r\n        getFormById(path[path.length - 1]).then(response => {\r\n            let f = response.data;\r\n\r\n            f.questions = JSON.parse(f.questions);\r\n\r\n            setForm(f);\r\n        });\r\n    }, [form.id]);\r\n\r\n    function saveForm() {\r\n\r\n        let studentForm = {\r\n            title: form.title,\r\n            lesson: form.lesson,\r\n            student: {\r\n                id: user.id\r\n            },\r\n            grade: 0,\r\n            date: new Date(),\r\n            comments: \"\",\r\n            content: JSON.stringify(form.questions)\r\n        };\r\n\r\n        postForm(studentForm)\r\n            .then(response => console.log(response.data))\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <div className={\"take-test-container p-4\"}>\r\n            <Form>\r\n                <Form.Group>\r\n                    <Row>\r\n                        <Col>\r\n                            <p className=\"take-test-title text-center\">{form.title}</p>\r\n                            <p className=\"take-test-subtitle text-center\">{form.lesson}</p>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Group>\r\n                <div className={\"text-left\"}>\r\n                    {\r\n                        form.questions.map((question, index) => {\r\n                            switch (question.type) {\r\n                                case \"OPEN\":\r\n                                    return drawOpenQuestionEditable(index, question, (value) => question.answer = value);\r\n                                case \"OPTIONS\":\r\n                                    return drawOptionsQuestionEditable(index, question);\r\n                                default:\r\n                                    throw new Error(\"No suitable method found\");\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n                <Button className={\"login-button\"} variant={\"outline-light\"} onClick={saveForm} block>Guardar</Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}