{"ast":null,"code":"var _jsxFileName = \"/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/form-creator/form-creator.js\";\nimport \"./form-creator.css\";\nimport React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { drawOpenQuestion, drawOptionsQuestion } from \"./question-drawer\";\nimport { OpenQuestionModal, OptionsQuestionModal } from \"./questions-factory\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { postForm } from \"../../services/FromsTeacherDataService\";\nexport const FormCreator = () => {\n  const [questions, setQuestions] = useState([]);\n  const [modalOpenQuestion, setModalOpenQuestion] = useState(false);\n  const [modalOptionQuestion, setModalOptionQuestion] = useState(false);\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [title, setTitle] = useState(\"Formulario de \" + user.name);\n  const [lesson, setLesson] = useState(\"LecciÃ³n de \" + user.name);\n  const formTeacher = {\n    title: title,\n    lesson: lesson,\n    teacher: {\n      id: user.id\n    },\n    questions: JSON.stringify(questions)\n  };\n\n  function pushQuestion(question) {\n    setQuestions([...questions, question]);\n  }\n\n  function saveForm() {\n    postForm(formTeacher).then(response => console.log(response.data)).catch(error => console.log(error));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: title,\n    className: \"form-title text-center\",\n    onChange: ({\n      target\n    }) => setTitle(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: lesson,\n    className: \"form-title text-center\",\n    onChange: ({\n      target\n    }) => setLesson(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, questions.map((question, index) => {\n    switch (question.type) {\n      case \"OPEN\":\n        return drawOpenQuestion(question, index);\n\n      case \"OPTIONS\":\n        return drawOptionsQuestion(question, index);\n\n      default:\n        throw new Error(\"No suitable method found\");\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"login-button\",\n    disabled: questions.length === 0,\n    variant: \"outline-light\",\n    onClick: saveForm,\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, \"Guardar\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-container p-3 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"panel-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Agrega una pregunta\"), /*#__PURE__*/React.createElement(Card, {\n    className: \"my-2 border-0 question-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, \"Abierta\"), /*#__PURE__*/React.createElement(Card.Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  }, \"Pregunta y respuesta simple\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"card-button\",\n    onClick: () => setModalOpenQuestion(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, \"Agregar\"))), /*#__PURE__*/React.createElement(Card, {\n    className: \"my-2 border-0 question-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, \"Opciones\"), /*#__PURE__*/React.createElement(Card.Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, \"Pregunta con N posibles respuestas\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"card-button\",\n    onClick: () => setModalOptionQuestion(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, \"Agregar\")))), /*#__PURE__*/React.createElement(OpenQuestionModal, {\n    show: modalOpenQuestion,\n    onHide: () => setModalOpenQuestion(false),\n    pushQuestion: pushQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(OptionsQuestionModal, {\n    show: modalOptionQuestion,\n    onHide: () => setModalOptionQuestion(false),\n    pushQuestion: pushQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/form-creator/form-creator.js"],"names":["React","useState","Form","Button","Card","drawOpenQuestion","drawOptionsQuestion","OpenQuestionModal","OptionsQuestionModal","FormControl","Col","Row","postForm","FormCreator","questions","setQuestions","modalOpenQuestion","setModalOpenQuestion","modalOptionQuestion","setModalOptionQuestion","user","JSON","parse","localStorage","getItem","title","setTitle","name","lesson","setLesson","formTeacher","teacher","id","stringify","pushQuestion","question","saveForm","then","response","console","log","data","catch","error","target","value","map","index","type","Error","length"],"mappings":"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","sourcesContent":["import \"./form-creator.css\"\r\n\r\nimport React, {useState} from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport {drawOpenQuestion, drawOptionsQuestion} from \"./question-drawer\";\r\nimport {OpenQuestionModal, OptionsQuestionModal} from \"./questions-factory\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport {postForm} from \"../../services/FromsTeacherDataService\";\r\n\r\nexport const FormCreator = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [modalOpenQuestion, setModalOpenQuestion] = useState(false);\r\n    const [modalOptionQuestion, setModalOptionQuestion] = useState(false);\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const [title, setTitle] = useState(\"Formulario de \" + user.name);\r\n    const [lesson, setLesson] = useState(\"LecciÃ³n de \" + user.name);\r\n\r\n    const formTeacher = {\r\n        title: title,\r\n        lesson: lesson,\r\n        teacher: {\r\n            id: user.id\r\n        },\r\n        questions: JSON.stringify(questions),\r\n    };\r\n\r\n    function pushQuestion(question) {\r\n        setQuestions([...questions, question]);\r\n    }\r\n\r\n    function saveForm() {\r\n        postForm(formTeacher)\r\n            .then(response => console.log(response.data))\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-4\">\r\n            <div className={\"form-container\"}>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <FormControl placeholder={title} className=\"form-title text-center\"\r\n                                             onChange={({target}) => setTitle(target.value)}/>\r\n                            </Col>\r\n                            <Col>\r\n                                <FormControl placeholder={lesson} className=\"form-title text-center\"\r\n                                             onChange={({target}) => setLesson(target.value)}/>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form.Group>\r\n                    <div className={\"text-left\"}>\r\n                        {\r\n                            questions.map((question, index) => {\r\n                                switch (question.type) {\r\n                                    case \"OPEN\":\r\n                                        return drawOpenQuestion(question, index);\r\n                                    case \"OPTIONS\":\r\n                                        return drawOptionsQuestion(question, index);\r\n                                    default:\r\n                                        throw new Error(\"No suitable method found\");\r\n                                }\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <Button className={\"login-button\"} disabled={questions.length === 0} variant={\"outline-light\"}\r\n                            onClick={saveForm} block>Guardar</Button>\r\n                </Form>\r\n            </div>\r\n\r\n            <div className={\"panel-container p-3 text-center\"}>\r\n                <p className={\"panel-title\"}>Agrega una pregunta</p>\r\n                <Card className={\"my-2 border-0 question-card\"}>\r\n                    <Card.Body>\r\n                        <Card.Title>Abierta</Card.Title>\r\n                        <Card.Subtitle>Pregunta y respuesta simple</Card.Subtitle>\r\n                        <Button className={\"card-button\"} onClick={() => setModalOpenQuestion(true)}>Agregar</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card className={\"my-2 border-0 question-card\"}>\r\n                    <Card.Body>\r\n                        <Card.Title>Opciones</Card.Title>\r\n                        <Card.Subtitle>Pregunta con N posibles respuestas</Card.Subtitle>\r\n                        <Button className={\"card-button\"} onClick={() => setModalOptionQuestion(true)}>Agregar</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n            <OpenQuestionModal show={modalOpenQuestion} onHide={() => setModalOpenQuestion(false)}\r\n                               pushQuestion={pushQuestion}/>\r\n            <OptionsQuestionModal show={modalOptionQuestion} onHide={() => setModalOptionQuestion(false)}\r\n                                  pushQuestion={pushQuestion}/>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}