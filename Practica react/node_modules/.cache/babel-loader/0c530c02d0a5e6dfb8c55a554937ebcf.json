{"ast":null,"code":"var _jsxFileName = \"/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/test-grade/test-grade-view.js\";\nimport \"./test-grade-view.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { useLocation } from 'react-router-dom';\nimport { drawOpenQuestionGradable, drawOptionsQuestionGradable } from \"../form-creator/question-drawer\";\nimport Button from \"react-bootstrap/Button\";\nimport { getFormById, putForm } from \"../../services/FromsStudentDataService\";\nexport const TestGradeView = () => {\n  const location = useLocation();\n  const path = location.pathname.split(\"/\");\n  const [form, setForm] = useState({\n    student: {},\n    content: []\n  });\n  const [grade, setGrade] = useState(0.0);\n  const [comments, setComments] = useState(\"\");\n  useEffect(() => {\n    getFormById(path[path.length - 1]).then(response => {\n      let f = response.data;\n      f.content = JSON.parse(f.content);\n      setForm(f);\n    });\n  }, [form.id]);\n\n  function saveForm() {\n    if (grade <= 10 || grade >= 5) {\n      let studentForm = {\n        id: form.id,\n        title: form.title,\n        lesson: form.lesson,\n        student: form.student,\n        grade: grade,\n        date: form.date,\n        comments: comments,\n        content: JSON.stringify(form.content)\n      };\n      putForm(studentForm.id, studentForm).then(response => console.log(response.data)).catch(error => console.log(error));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grade-test-container p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"grade-test-title text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  }, form.title), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"grade-test-subtitle text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }\n  }, form.lesson)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, form.content.map((question, index) => {\n    switch (question.type) {\n      case \"OPEN\":\n        return drawOpenQuestionGradable(index, question);\n\n      case \"OPTIONS\":\n        return drawOptionsQuestionGradable(index, question);\n\n      default:\n        throw new Error(\"No suitable method found\");\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  }, \"Calificaci\\xF3n\"), /*#__PURE__*/React.createElement(Form.Control, {\n    style: {\n      background: \"var(--light)\",\n      color: \"var(--dark)\"\n    },\n    type: \"number\",\n    onChange: ({\n      target\n    }) => setGrade(parseFloat(target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 33\n    }\n  }, \"Comentarios\"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"textarea\",\n    rows: \"3\",\n    onChange: ({\n      target\n    }) => setComments(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 33\n    }\n  }))))), /*#__PURE__*/React.createElement(Button, {\n    className: \"login-button\",\n    variant: \"outline-light\",\n    onClick: saveForm,\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"Guardar\")));\n};","map":{"version":3,"sources":["/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/test-grade/test-grade-view.js"],"names":["React","useEffect","useState","Form","Row","Col","useLocation","drawOpenQuestionGradable","drawOptionsQuestionGradable","Button","getFormById","putForm","TestGradeView","location","path","pathname","split","form","setForm","student","content","grade","setGrade","comments","setComments","length","then","response","f","data","JSON","parse","id","saveForm","studentForm","title","lesson","date","stringify","console","log","catch","error","map","question","index","type","Error","background","color","target","parseFloat","value"],"mappings":"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","sourcesContent":["import \"./test-grade-view.css\";\r\n\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {useLocation} from 'react-router-dom'\r\nimport {drawOpenQuestionGradable, drawOptionsQuestionGradable} from \"../form-creator/question-drawer\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {getFormById, putForm} from \"../../services/FromsStudentDataService\";\r\n\r\nexport const TestGradeView = () => {\r\n    const location = useLocation();\r\n    const path = location.pathname.split(\"/\");\r\n\r\n    const [form, setForm] = useState({student: {}, content: []});\r\n    const [grade, setGrade] = useState(0.0);\r\n    const [comments, setComments] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        getFormById(path[path.length - 1]).then(response => {\r\n            let f = response.data;\r\n\r\n            f.content = JSON.parse(f.content);\r\n\r\n            setForm(f);\r\n        });\r\n    }, [form.id]);\r\n\r\n    function saveForm() {\r\n\r\n        if (grade <= 10 || grade >= 5) {\r\n            let studentForm = {\r\n                id: form.id,\r\n                title: form.title,\r\n                lesson: form.lesson,\r\n                student: form.student,\r\n                grade: grade,\r\n                date: form.date,\r\n                comments: comments,\r\n                content: JSON.stringify(form.content)\r\n            };\r\n\r\n            putForm(studentForm.id, studentForm)\r\n                .then(response => console.log(response.data))\r\n                .catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"grade-test-container p-4\"}>\r\n            <Form>\r\n                <Form.Group>\r\n                    <Row>\r\n                        <Col>\r\n                            <p className=\"grade-test-title text-center\">{form.title}</p>\r\n                            <p className=\"grade-test-subtitle text-center\">{form.lesson}</p>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Group>\r\n                <div className={\"text-left\"}>\r\n                    {\r\n                        form.content.map((question, index) => {\r\n                            switch (question.type) {\r\n                                case \"OPEN\":\r\n                                    return drawOpenQuestionGradable(index, question);\r\n                                case \"OPTIONS\":\r\n                                    return drawOptionsQuestionGradable(index, question);\r\n                                default:\r\n                                    throw new Error(\"No suitable method found\");\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n                <Form.Group>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Calificación</Form.Label>\r\n                                <Form.Control style={{background: \"var(--light)\", color: \"var(--dark)\"}} type=\"number\"\r\n                                              onChange={({target}) => setGrade(parseFloat(target.value))}/>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Comentarios</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"3\"\r\n                                              onChange={({target}) => setComments(target.value)}/>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Group>\r\n                <Button className={\"login-button\"} variant={\"outline-light\"} onClick={saveForm} block>Guardar</Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}