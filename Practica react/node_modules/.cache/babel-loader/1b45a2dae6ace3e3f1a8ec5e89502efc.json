{"ast":null,"code":"var _jsxFileName = \"/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/form-creator/questions-factory.js\";\nimport React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Toast from \"react-bootstrap/Toast\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction makeQuestion(type, title, answer, options) {\n  return {\n    type: type,\n    title: title,\n    answer: answer,\n    options: options\n  };\n}\n\nexport const OpenQuestionModal = args => {\n  const [title, setTitle] = useState(\"\");\n  return /*#__PURE__*/React.createElement(Modal, {\n    show: args.show,\n    onHide: args.onHide,\n    size: \"lg\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, \"Nueva pregunta abierta\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }\n  }, \"Digite su pregunta\")), /*#__PURE__*/React.createElement(FormControl, {\n    id: \"question\",\n    style: {\n      background: \"var(--light)\",\n      color: \"var(--dark)\",\n      borderRadius: \"1rem\"\n    },\n    onChange: ({\n      target\n    }) => setTitle(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-light\",\n    onClick: () => {\n      args.pushQuestion(makeQuestion(\"OPEN\", title, \"Answer 1\", []));\n      args.onHide();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, \"Guardar\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-light\",\n    onClick: args.onHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, \"Cancelar\")));\n};\nexport const OptionsQuestionModal = args => {\n  const [showError, setShowError] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [options, setOptions] = useState([]);\n\n  function resetModal() {\n    setShowError(false);\n    setTitle(\"\");\n    setOptions([]);\n    args.onHide();\n  }\n\n  function makeOption(title, correct) {\n    return {\n      title: title,\n      correct: correct\n    };\n  }\n\n  function drawOption(index, option) {\n    return /*#__PURE__*/React.createElement(InputGroup, {\n      key: index,\n      className: \"my-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Radio, {\n      name: \"options_radios\",\n      onChange: ({\n        target\n      }) => {\n        option.correct = target.checked;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      placeholder: \"OpciÃ³n\",\n      onChange: ({\n        target\n      }) => option.title = target.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    show: args.show,\n    onHide: resetModal,\n    size: \"lg\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Nueva pregunta de opci\\xF3n m\\xFAltiple\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Toast, {\n    show: showError,\n    onClose: () => setShowError(false),\n    className: \"bg-transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Toast.Header, {\n    className: \"bg-danger text-light border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"mr-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 33\n    }\n  }, \"Error\")), /*#__PURE__*/React.createElement(Toast.Body, {\n    className: \"bg-danger text-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }, \"La pregunta debe tener al menos 2 opciones y una de ellas debe estar seleccionada\")))), /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, \"Digite su pregunta\")), /*#__PURE__*/React.createElement(FormControl, {\n    id: \"question\",\n    style: {\n      background: \"var(--light)\",\n      color: \"var(--dark)\",\n      borderRadius: \"1rem\"\n    },\n    onChange: ({\n      target\n    }) => setTitle(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  })), options.map((option, index) => drawOption(index, option))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    style: {\n      background: \"var(--dark)\",\n      color: \"var(--light)\",\n      border: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-light\",\n    onClick: () => setOptions([...options, makeOption(\"\", false)]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, \"Agregar opci\\xF3n\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-light\",\n    disabled: false,\n    onClick: () => {\n      if (options.length > 1) {\n        let finish = options.find(option => option.correct === true);\n\n        if (finish) {\n          args.pushQuestion(makeQuestion(\"OPTIONS\", title, \"\", options));\n          resetModal();\n        } else {\n          setShowError(true);\n        }\n      } else {\n        setShowError(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Guardar\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-light\",\n    onClick: resetModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, \"Cancelar\")));\n};","map":{"version":3,"sources":["/home/skylar/Documentos/learnin Play/Frontend/front/src/pages/form-creator/questions-factory.js"],"names":["React","useState","Modal","InputGroup","FormControl","Button","Toast","Container","Row","Col","makeQuestion","type","title","answer","options","OpenQuestionModal","args","setTitle","show","onHide","background","color","border","borderRadius","target","value","pushQuestion","OptionsQuestionModal","showError","setShowError","setOptions","resetModal","makeOption","correct","drawOption","index","option","checked","map","length","finish","find"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Toast from \"react-bootstrap/Toast\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nfunction makeQuestion(type, title, answer, options) {\r\n    return {\r\n        type: type,\r\n        title: title,\r\n        answer: answer,\r\n        options: options,\r\n    }\r\n}\r\n\r\nexport const OpenQuestionModal = (args) => {\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    return (\r\n        <Modal show={args.show} onHide={args.onHide} size=\"lg\" centered>\r\n            <Modal.Header style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                <Modal.Title>Nueva pregunta abierta</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                            Digite su pregunta\r\n                        </InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl id={\"question\"}\r\n                                 style={{background: \"var(--light)\", color: \"var(--dark)\", borderRadius: \"1rem\"}}\r\n                                 onChange={({target}) => setTitle(target.value)}/>\r\n                </InputGroup>\r\n            </Modal.Body>\r\n            <Modal.Footer style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                <Button variant={\"outline-light\"} onClick={() => {\r\n                    args.pushQuestion(makeQuestion(\"OPEN\", title, \"Answer 1\", []));\r\n                    args.onHide();\r\n                }}>Guardar</Button>\r\n                <Button variant={\"outline-light\"} onClick={args.onHide}>Cancelar</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport const OptionsQuestionModal = (args) => {\r\n\r\n    const [showError, setShowError] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n\r\n    function resetModal() {\r\n        setShowError(false);\r\n        setTitle(\"\");\r\n        setOptions([]);\r\n        args.onHide()\r\n    }\r\n\r\n    function makeOption(title, correct) {\r\n        return {\r\n            title: title,\r\n            correct: correct\r\n        };\r\n    }\r\n\r\n    function drawOption(index, option) {\r\n        return (\r\n            <InputGroup key={index} className={\"my-2\"}>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Radio name={\"options_radios\"}\r\n                                      onChange={({target}) => {\r\n                                          option.correct = target.checked;\r\n                                      }}/>\r\n                </InputGroup.Prepend>\r\n                <FormControl placeholder={\"OpciÃ³n\"} onChange={({target}) => option.title = target.value}/>\r\n            </InputGroup>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Modal show={args.show} onHide={resetModal} size=\"lg\" centered>\r\n            <Modal.Header style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                <Modal.Title>Nueva pregunta de opciÃ³n mÃºltiple</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                <Row className=\"mb-4\">\r\n                    <Col/>\r\n                    <Col>\r\n                        <Toast show={showError} onClose={() => setShowError(false)} className=\"bg-transparent\">\r\n                            <Toast.Header className=\"bg-danger text-light border-0\">\r\n                                <strong className=\"mr-auto\">Error</strong>\r\n                            </Toast.Header>\r\n                            <Toast.Body className=\"bg-danger text-light\">\r\n                                La pregunta debe tener al menos 2 opciones y una de ellas debe estar seleccionada\r\n                            </Toast.Body>\r\n                        </Toast>\r\n                    </Col>\r\n                </Row>\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                            Digite su pregunta\r\n                        </InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl id={\"question\"}\r\n                                 style={{background: \"var(--light)\", color: \"var(--dark)\", borderRadius: \"1rem\"}}\r\n                                 onChange={({target}) => setTitle(target.value)}/>\r\n                </InputGroup>\r\n                {\r\n                    options.map((option, index) => drawOption(index, option))\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer style={{background: \"var(--dark)\", color: \"var(--light)\", border: \"0\"}}>\r\n                <Button variant={\"outline-light\"} onClick={() => setOptions([...options, makeOption(\"\", false)])}>\r\n                    Agregar opciÃ³n\r\n                </Button>\r\n                <Button variant={\"outline-light\"} disabled={false} onClick={() => {\r\n                    if (options.length > 1) {\r\n                        let finish = options.find(option => option.correct === true);\r\n                        if (finish) {\r\n                            args.pushQuestion(makeQuestion(\"OPTIONS\", title, \"\", options));\r\n                            resetModal();\r\n                        } else {\r\n                            setShowError(true);\r\n                        }\r\n                    } else {\r\n                        setShowError(true);\r\n                    }\r\n                }}>Guardar</Button>\r\n                <Button variant={\"outline-light\"} onClick={resetModal}>Cancelar</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}